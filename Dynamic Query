            string DateQuery = "";
            string DateQuery2 = "";
            string DateQuery3 = "";
            string SearchTextQ = "";
            string orderquery = "";
            string orderquery1 = "";
            string groupquery = "";
            string groupquery1 = "";
            #region Order
            if (!string.IsNullOrWhiteSpace(order))
            {
                if (order == "ascending/soldby")
                {
                    orderquery = "order by EmployeeName asc";
                    orderquery1 = "order by EmployeeName asc";
                }
                else if (order == "descending/soldby")
                {
                    orderquery = "order by EmployeeName desc";
                    orderquery1 = "order by EmployeeName desc";
                }
               




                else if (order == "ascending/scheduled")
                {
                    orderquery = "order by Scheduled asc";
                    orderquery1 = "order by Scheduled asc";
                }
                else if (order == "descending/scheduled")
                {
                    orderquery = "order by Scheduled desc";
                    orderquery1 = "order by Scheduled desc";
                }
                else if (order == "ascending/totalscheduled")
                {
                    orderquery = "order by TotalScheduledPrice asc";
                    orderquery1 = "order by TotalScheduledPrice asc";
                }
                else if (order == "descending/totalscheduled")
                {
                    orderquery = "order by TotalScheduledPrice desc";
                    orderquery1 = "order by TotalScheduledPrice desc";
                }
                
                



                
                else
                {
                    orderquery = "order by EmployeeName asc";
                    orderquery1 = "order by EmployeeName asc";
                }
            }
            else
            {
                orderquery = "order by EmployeeName asc";
                orderquery1 = "order by EmployeeName asc";
            }
            #endregion
            if (!string.IsNullOrWhiteSpace(searchtext))
            {
                SearchTextQ = string.Format("and emp.FirstName +' '+ emp.LastName like @SearchText");
            }
            if (!string.IsNullOrWhiteSpace(groupuser))
            {
                groupquery = string.Format("left join UserPermission up on up.UserId = emp.UserId");
                groupquery1 = string.Format("and up.PermissionGroupId in ({0})", groupuser);
            }
            if (start.HasValue && end.HasValue && start.Value != new DateTime() && end.Value != new DateTime())
            {
                DateQuery = string.Format("and bk.CreatedDate between '{0}' and '{1}'", start.Value.SetZeroHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"), end.Value.SetMaxHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"));
                DateQuery2 = string.Format("and bkd.AddedDate between '{0}' and '{1}'", start.Value.SetZeroHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"), end.Value.SetMaxHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"));
                DateQuery3 = string.Format("and tk.CompletionDate between '{0}' and '{1}'", start.Value.SetZeroHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"), end.Value.SetMaxHour().ClientToUTCTime().ToString("yyyy-MM-dd HH:mm:ss.fff"));
            }
            string sqlQuery = $@"
DECLARE @pagestart INT
DECLARE @pageend INT
DECLARE @pageno INT
DECLARE @pagesize INT

SET @pageno = {0}
SET @pagesize = {1}
SET @pagestart = (@pageno - 1) * @pagesize
SET @pageend = @pagesize

-- Step 1: Aggregate employee data into a temporary table
SELECT 
    emp.Id, 
    emp.UserId,
    emp.FirstName + ' ' + emp.LastName AS EmployeeName,
    (SELECT COUNT(*)
     FROM Booking bk 
     WHERE bk.CreatedBy = emp.UserId 
       AND bk.[Status] != 'Init' 
       {5}) AS BookingCreated,
    CAST(ISNULL((SELECT SUM(ISNULL(bk.Amount, 0) + ISNULL(bk.TravelFee, 0) +
                          CASE WHEN bk.IsOutofServiceDeleted = 1 THEN 0 ELSE ISNULL(bk.OutOfAreaServiceFee, 0) END) 
                 FROM Booking bk
                 WHERE bk.CreatedBy = emp.UserId 
                   AND bk.[Status] != 'Init' 
                   {5}), 0) AS DECIMAL(18, 2)) AS BookingCreatedAmount,
    (SELECT COUNT(*)
     FROM Booking bk 
     WHERE bk.LastUpdatedBy = emp.UserId 
       AND bk.[Status] = 'Approved' 
       {5}) AS ApprovedBooking,
    CAST(ISNULL((SELECT SUM(ISNULL(bk.Amount, 0) + ISNULL(bk.TravelFee, 0) +
                          CASE WHEN bk.IsOutofServiceDeleted = 1 THEN 0 ELSE ISNULL(bk.OutOfAreaServiceFee, 0) END) 
                 FROM Booking bk
                 WHERE bk.CreatedBy = emp.UserId 
                   AND bk.[Status] = 'Approved' 
                   {5}), 0) AS DECIMAL(18, 2)) AS TotalApprovedBooking,
    (SELECT COUNT(*)
     FROM Booking bk 
     WHERE bk.LastUpdatedBy = emp.UserId 
       AND bk.[Status] = 'Scheduled' 
       {5}) AS Scheduled,
    CAST(ISNULL((SELECT SUM(ISNULL(bk.Amount, 0) + ISNULL(bk.TravelFee, 0) +
                          CASE WHEN bk.IsOutofServiceDeleted = 1 THEN 0 ELSE ISNULL(bk.OutOfAreaServiceFee, 0) END) 
                 FROM Booking bk
                 WHERE bk.CreatedBy = emp.UserId 
                   AND bk.[Status] = 'Scheduled' 
                   {5}), 0) AS DECIMAL(18, 2)) AS TotalScheduled,
    (SELECT COUNT(*)
     FROM Booking bk 
     WHERE bk.LastUpdatedBy = emp.UserId 
       AND bk.[Status] = 'Sent To Customer' 
       {5}) AS SentToCustomer,
    CAST(ISNULL((SELECT SUM(ISNULL(bk.Amount, 0) + ISNULL(bk.TravelFee, 0) +
                          CASE WHEN bk.IsOutofServiceDeleted = 1 THEN 0 ELSE ISNULL(bk.OutOfAreaServiceFee, 0) END) 
                 FROM Booking bk
                 WHERE bk.CreatedBy = emp.UserId 
                   AND bk.[Status] = 'Sent To Customer' 
                   {5}), 0) AS DECIMAL(18, 2)) AS TotalSentToCustomer,
    (SELECT COUNT(*)
     FROM Booking bk 
     WHERE bk.LastUpdatedBy = emp.UserId 
       AND bk.[Status] = 'Resend To Customer' 
       {5}) AS ResendToCustomer,
    CAST(ISNULL((SELECT SUM(ISNULL(bk.Amount, 0) + ISNULL(bk.TravelFee, 0) +
                          CASE WHEN bk.IsOutofServiceDeleted = 1 THEN 0 ELSE ISNULL(bk.OutOfAreaServiceFee, 0) END) 
                 FROM Booking bk
                 WHERE bk.CreatedBy = emp.UserId 
                   AND bk.[Status] = 'Resend To Customer' 
                   {5}), 0) AS DECIMAL(18, 2)) AS TotalResendToCustomer,
    (SELECT COUNT(*)
     FROM Booking bk 
     WHERE bk.LastUpdatedBy = emp.UserId 
       AND bk.[Status] = 'Declined' 
       {5}) AS Declined,
    CAST(ISNULL((SELECT SUM(ISNULL(bk.Amount, 0) + ISNULL(bk.TravelFee, 0) +
                          CASE WHEN bk.IsOutofServiceDeleted = 1 THEN 0 ELSE ISNULL(bk.OutOfAreaServiceFee, 0) END) 
                 FROM Booking bk
                 WHERE bk.CreatedBy = emp.UserId 
                   AND bk.[Status] = 'Declined' 
                   {5}), 0) AS DECIMAL(18, 2)) AS TotalDeclined,
    (SELECT COUNT(*)
     FROM Booking bk 
     WHERE bk.LastUpdatedBy = emp.UserId 
       AND bk.[Status] = 'Draft' 
       {5}) AS Draft,
    CAST(ISNULL((SELECT SUM(ISNULL(bk.Amount, 0) + ISNULL(bk.TravelFee, 0) +
                          CASE WHEN bk.IsOutofServiceDeleted = 1 THEN 0 ELSE ISNULL(bk.OutOfAreaServiceFee, 0) END) 
                 FROM Booking bk
                 WHERE bk.CreatedBy = emp.UserId 
                   AND bk.[Status] = 'Draft' 
                   {5}), 0) AS DECIMAL(18, 2)) AS TotalDraft,
    (SELECT COUNT(*)
     FROM Booking bk 
     WHERE bk.LastUpdatedBy = emp.UserId 
       AND bk.[Status] = 'Cancelled' 
       {5}) AS Cancelled,
    CAST(ISNULL((SELECT SUM(ISNULL(bk.Amount, 0) + ISNULL(bk.TravelFee, 0) +
                          CASE WHEN bk.IsOutofServiceDeleted = 1 THEN 0 ELSE ISNULL(bk.OutOfAreaServiceFee, 0) END) 
                 FROM Booking bk
                 WHERE bk.CreatedBy = emp.UserId 
                   AND bk.[Status] = 'Cancelled' 
                   {5}), 0) AS DECIMAL(18, 2)) AS TotalCancelled
INTO #EmployeeData 
FROM Employee emp
{8}
WHERE emp.Id > 0 {2} {9};

-- Step 2: Filter and order the employee data
SELECT * 
INTO #customerFilterdata 
FROM #EmployeeData
WHERE BookingCreated > 0 OR BookingCreatedAmount > 0 OR ApprovedBooking > 0 OR TotalApprovedBooking > 0 OR Scheduled > 0 OR TotalScheduled > 0 OR SentToCustomer > 0 OR TotalSentToCustomer > 0 OR ResendToCustomer > 0 OR TotalResendToCustomer > 0 OR Declined > 0 OR TotalDeclined > 0 OR Draft > 0 OR TotalDraft > 0 OR Cancelled > 0 OR TotalCancelled > 0;

-- Step 3: Paginate the filtered data
SELECT TOP (@pagesize) * 
FROM #customerFilterdata
WHERE Id NOT IN (SELECT TOP (@pagestart) Id FROM #customerFilterdata {3})
{4};

-- Clean up temporary tables
DROP TABLE #EmployeeData;
DROP TABLE #customerFilterdata;";
